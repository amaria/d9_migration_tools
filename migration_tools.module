<?php

/**
 * @file
 * Drupal Hooks definitions.
 *
 * @package migration_tools
 */

// Use the class 4 autoloder to load classes as they are called.
require_once 'vendor/autoload.php';

/**
 * Implements hook_menu_alter().
 */
function migration_tools_menu_alter(&$items) {
  // Viewing this page calls the contstructors for all registered migration
  // classes, overwhelming PHP memory limit. So if desired, we will obscure
  // the forms.
  if (variable_get("migration_tools_migrate_ui_hidden", FALSE)) {
    $items['admin/content/migrate/configure']['page callback'] = array('migration_tools_migrate_ui_null');
    $items['admin/content/migrate']['page arguments'] = array('migration_tools_migrate_ui_null');
  }
}

/**
 * Set workbench configuration for entity.
 *
 * This fixes a number of bugs that result from workbench revisions failing
 * to be created or updated when entities are created or updated.
 */
function migration_tools_prepare_workbench_settings($entity, $row) {
  $entity->is_new = !isset($row->migrate_map_needs_update);
  $entity->revision = TRUE;
  $entity->workbench_moderation_state_current = 'published';
  $entity->workbench_moderation_state_new = 'published';
}

/**
 * Ensure imported node revision is marked published (status = 1).
 *
 * This fixes a migrate/workbench issue where imported
 * published nodes have node_revision.status == 0.
 *
 * Must use db_query() as db_update() doesn't implement join().
 */
function migration_tools_complete_workbench_settings($entity, $row) {
  db_query("UPDATE {node_revision} nr
JOIN {node} n ON (n.vid = nr.vid AND n.nid = :nid)
SET nr.status = 1 WHERE n.status = 1 AND nr.status = 0",
    array(':nid' => $entity->nid));
}

/**
 * Implements hook_module_implements_alter().
 */
function migration_tools_module_implements_alter(&$implementations, $hook) {
  global $_migration_tools_is_running;

  // Sadly, we cannot use the migrate module's $disable_hooks to disable
  // hook_node_update() from firing on `drush migrate-import` because
  // hook_node_update() is triggered too late, at which point
  // Migration::currentMigration() returns FALSE. This is due to workbench
  // moderation calling node_update() from a shutdown function.
  if (class_exists('Migration') && $migration = Migration::currentMigration()) {
    $_migration_tools_is_running = TRUE;
  }

  if (in_array($hook, array('node_update', 'node_insert')) && $_migration_tools_is_running) {
    unset($implementations['akamai']);
    unset($implementations['expire']);
  }
}

/**
 * Implements hook_help().
 */
function migration_tools_help($path, $arg) {
  switch ($path) {
    case 'admin/help#migration_tools':
      $content = file_get_contents(drupal_get_path('module', 'migration_tools') . '/README.md');
      if (module_exists('markdown') && module_load_include('module', 'markdown', 'markdown') && function_exists('_filter_markdown')) {
        // Markdown can be used.
        module_load_include('module', 'markdown', 'markdown');
        $output = filter_xss_admin(_filter_markdown($content, 'markdown'));
      }
      if (empty($output)) {
        // Markdown is not available.
        $output = '<pre>' . check_plain($content) . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function migration_tools_menu() {
  $items['base domain'] = array(
    'title' => 'Base domain for migration',
    'page callback' => '_get_base_domain',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['migrate ui hidden'] = array(
    'title' => 'Hide the migrate ui',
    'page callback' => '_get_migrate_ui_hidden',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/content/migrate/migration_tools'] = array(
    'title' => 'Migration Tools - settings',
    'description' => 'Settings for the Migration Tools module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migration_tools_admin'),
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
    'type' => MENU_LOCAL_TASK,
    'weight' => 150,
  );
  return $items;
}


/**
 * The callback function creates an admin form for a menu hook.
 */
function migration_tools_admin() {
  $form = array();

  $form['migration_tools_base_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Base domain'),
    '#default_value' => check_plain(variable_get('migration_tools_base_domain', '')),
    '#size' => 60,
    '#maxlength' => 60,
    '#description' => t("This is the full domain including protocol that should be used for migrations. example: http://www.mysite.com"),
    '#required' => TRUE,
  );

  $form['migration_tools_custom_migration_module'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom migration module machine name'),
    '#default_value' => check_plain(variable_get('migration_tools_custom_migration_module', '')),
    '#size' => 60,
    '#maxlength' => 60,
    '#description' => t("This is the machine name of where your custom migration classes reside. It is also where files generated by this Migration Tools will be created.  example: migration_custom"),
    '#required' => FALSE,
  );

  $dir = check_plain($_SERVER['DOCUMENT_ROOT']);
  // Remove the docroot to go up one level.
  $dirs = explode('/', $dir, -1);
  $dir = implode('/', $dirs);
  $description = t("This is the server location of the source files.  Example: !example", array('!example' => $dir . '/migration_source'));
  $description .= "<br />" . t("Tip: Symlink 'migration_source' to your actual location.");
  $description .= "<br />" . t("Tip: If needed, override in") . ' local.settings.php: $conf[\'migration_tools_source_directory_base\'] = \'/root/path/to/migration/source\';';
  $form['migration_tools_source_directory_base'] = array(
    '#type' => 'textfield',
    '#title' => t('Server path to base of migration source files.'),
    '#default_value' => check_plain(variable_get('migration_tools_source_directory_base', '')),
    '#size' => 256,
    '#maxlength' => 256,
    '#description' => $description,
    '#required' => FALSE,
  );

  $form['migration_tools_custom_menu_module'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom migration module/Feature machine name'),
    '#default_value' => check_plain(variable_get('migration_tools_custom_menu_module', '')),
    '#size' => 60,
    '#maxlength' => 60,
    '#description' => t("This is the machine name of your custom menu management Feature. It is where the menu files generated by Migration Tools will be created.  example: site_menus"),
    '#required' => FALSE,
  );

  $form['migration_tools_custom_menu_dest_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to where menu import files are saved.'),
    '#default_value' => check_plain(variable_get('migration_tools_custom_menu_dest_path', 'menu_source')),
    '#size' => 60,
    '#maxlength' => 90,
    '#description' => t("This is the path within the costom menu Feature where the menu files generated by Migration Tools will be saved.  default: menu_source"),
    '#required' => FALSE,
  );

  $form['migration_tools_custom_menu_csv_source_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to menu src files.'),
    '#default_value' => check_plain(variable_get('migration_tools_custom_menu_csv_source_path', 'menu_source/menu_csv')),
    '#size' => 60,
    '#maxlength' => 90,
    '#description' => t("This is the path within the costom menu Feature where the csv files used to generate the import files are found.  default: menu_source/menu_csv"),
    '#required' => FALSE,
  );

  $form['migration_tools_migrate_ui_hidden'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide Migrate UI'),
    '#default_value' => check_plain(variable_get('migration_tools_migrate_ui_hidden', '')),
    '#description' => t("Checking this box will hide the Migrate UI to protect performance and require use of the drush interface.  Requires a menu cache flush to take effect."),
    '#required' => FALSE,
  );
  return system_settings_form($form);
}

/**
 * The callback function creates a form with only a form blocked message.
 *
 * @return array
 *   A Drupal form array.
 */
function migration_tools_migrate_ui_null() {
  $form = array();
  $message = t('This form is blocked by a Migration Tools setting.');
  $form['some_text'] = array(
    '#markup' => "<p>$message</p>",
  );

  return $form;
}
